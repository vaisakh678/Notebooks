{
    "digit-rnn": [
        "sr/bin/env python\n# coding: utf-8",
        "import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM, SimpleRNN\nimport matplotlib.pyplot as plt",
        "mnist = tf.keras.datasets.mnist\n(x_train, y_train),(x_test, y_test) = mnist.load_data()\nx_train1=x_train/255.0\nx_test1=x_test/255.0",
        "print(x_train1.shape)",
        "model=Sequential()\nmodel.add(SimpleRNN(128, input_shape=(28,28),return_sequences=True))\nmodel.add(Dropout(0.2))\n\nmodel.add(SimpleRNN(128))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(10,activation='softmax'))\n\n\nmodel.summary()",
        "model.compile(loss=\"sparse_categorical_crossentropy\",\n              optimizer=\"sgd\",\n              metrics=[\"accuracy\"])",
        "model_history = model.fit(x_train1,y_train,epochs=3,validation_data=(x_test1,y_test))",
        "scores=model.evaluate(x_test,y_test,verbose=0)\nprint(\"Accuracy: %.2f%%\" %(scores[1]*100))\n# loss, accuracy = model.evaluate(x_test, y_train,verbose=0 )\n# print(\"Training Accuracy : \", format(accuracy))",
        "# plot loss\nprint(model_history.history.keys())\nhistory_dict= model_history.history\nplt.subplot(2, 1, 1)\nplt.title('Cross Entropy Loss')\nplt.plot(history_dict['loss'], color='blue', label='train')\nplt.plot(history_dict['val_loss'], color='orange', label='test')\n# plot accuracy\nplt.subplot(2, 1, 2)\nplt.title('Classification Accuracy')\nplt.plot(history_dict['accuracy'], color='blue', label='train')\nplt.plot(history_dict['val_accuracy'], color='orange', label='test')\nplt.show()",
        "#implementing LSTM\n\nmodel2=Sequential()\nmodel2.add(LSTM(128, input_shape=(28,28),return_sequences=True))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(LSTM(128))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Dense(32,activation='relu'))\nmodel2.add(Dropout(0.2))\n\nmodel2.add(Dense(10,activation='softmax'))\n\n\nmodel2.summary()",
        "model2.compile(loss=\"sparse_categorical_crossentropy\",\n              optimizer=\"sgd\",\n              metrics=[\"accuracy\"])",
        "model2_history = model2.fit(x_train1,y_train,epochs=3,validation_data=(x_test1,y_test))",
        "scores=model2.evaluate(x_train1,y_train,verbose=0)\nprint(\"Accuracy: %.2f%%\" %(scores[1]*100))\nscores\n\n\n# how to load CIFAR10\n# implement cnn in this program\n#"
    ]
}